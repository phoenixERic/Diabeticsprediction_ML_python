# -*- coding: utf-8 -*-
"""Copy of Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qqw123aYO0xEvwYiCWG2eW-I-s7dSB7g
"""

import pandas as pd
import matplotlib.pyplot as mp
import numpy as np



dataset=pd.read_csv("/content/diabetes.csv")

x=dataset.iloc[:,:-1].values
print(x)
y=dataset.iloc[:,-1].values
print(y)

"""missing values:
sklearn library,
simple imputer class,
impute module,
fit method searches for  values  where it is 0,
tranform :missing values with mean and returns.
"""

from sklearn.impute import SimpleImputer
imputerobj=SimpleImputer(missing_values= 0 ,strategy="mean")
imputerobj.fit(x[: ,: ])
x=imputerobj.transform(x [:,:])
print(x)

from  sklearn. model_selection  import  train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)
print(x_train)
print(x_test)
print(y_train)
print(y_test)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train[:,:]=sc.fit_transform(x_train[:,:])
x_test[:,:]=sc.transform(x_test[:,:])
print(x_train)
print(x_test)

from sklearn import svm
classifier =  svm.SVC(kernel='linear', C=1, gamma='scale')
#SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,
   # decision_function_shape='ovr', degree=3, gamma='scale', kernel='linear',
    #max_iter=-1, probability=False, random_state=None, shrinking=True,
    #ol=0.001, verbose=False)

#training the support vector Machine Classifier
classifier.fit(x_train, y_train)

# accuracy score on the training data
from sklearn.metrics import accuracy_score
x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)
print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

input_data = (5,166,72,19,175,25.8,0.587,51)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = sc.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')